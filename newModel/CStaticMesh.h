#pragma once
#include	<d3d11.h>
#include	<DirectXMath.h>
#include	<wrl/client.h>
#include	<vector>
#include	<string>
#include	<unordered_map>
#include	<WICTextureLoader.h>

// assimp５．２．５用
#include	<assimp\Importer.hpp>
#include	<assimp\scene.h>
#include	<assimp\postprocess.h>
#include	<assimp/cimport.h>

// 頂点定義
#include	"../renderer.h"

#include	"dx11helper.h"
#include	"../utility.h"
#include	"CMaterial.h"
#include	"../CMesh.h"
#include "../modelRenderer.h"

// assimp 5.2.5 用ライブラリ
#pragma comment(lib,"assimp-vc143-mtd.lib")

class CStaticMesh : public CMesh {
private:
	std::vector<SUBSET>			m_subsets;		// サブセット群
	std::vector<MATERIAL>		m_materials;	// マテリアルテーブル

	// 内蔵テクスチャかどうかを識別する
	bool isEmbeddedTexure(const aiTexture* aitexture);

	// assimpの内部データにセットされているテクスチャ名をキーとして保存
	std::unordered_map<std::string, ID3D11ShaderResourceView*> m_Texturedic;

	// テクスチャリソーステーブル
	std::vector<ID3D11ShaderResourceView*>	m_AllTexture;

	// テクスチャファイルを読み込んでSRVを生成する
	ID3D11ShaderResourceView* LoadDiffuseTexture(std::string filename);

	// このモデルのパス名
	std::string m_filename;

protected:
	const aiScene* m_AiScene = nullptr;			// assimp scene

	// ボーン情報辞書（ボーン名で参照可能）					// （20231220追加）
	std::unordered_map<std::string, C_BONE> m_Bone;			// （20231220追加）

	// サブセット単位でボーン情報を集めたもの
	std::vector<std::vector<C_BONE>>	m_SubsetBones;			// （20231225追加）

	// ボーン情報生成（ボーンの空情報を生成する）			// （20231220追加）
	void CreateBone(aiNode* node);

	// ボーン名、ボーンウェイトを頂点にセットする
	void SetBoneDataToVertices();							// （20231225追加）

	// ボーン情報を取得する
	std::vector<C_BONE> GetBoneInfo(const aiMesh* mesh);		//	(20231225追加)

	// サブセットを１つにまとめるためのベースを計算する
	void CalcMeshBaseIndex();

	// 全テクスチャを取得(辞書を作成する為)
	void GetTextures(const aiScene* aiscene);

	// マテリアルに含まれるデータを取得する
	void GetMaterials(const aiScene* aiscene);				// 全マテリアル分ループ
	void GetaMatreial(const aiMaterial* aimtrl);			// １つのマテリアル

	// aiメッシュに含まれる頂点を取り出す
	unsigned int GetVerticesFromaiMesh(const aiMesh* aimesh);

	// aiメッシュに含まれるインデックスを取り出す
	unsigned int  GetIndicesFromaiMesh(const aiMesh* aimesh);
public:
	// 初期化
	bool Init(std::string filename);

	// 終了処理
	void Exit();

	// サブセットデータ取得
	const std::vector<SUBSET>& GetSubsets() {
		return m_subsets;
	}

	// SRVテーブル取得
	const std::vector<ID3D11ShaderResourceView*>& GetSRVtable() {
		return m_AllTexture;
	}

	// マテリアルデータ取得
	const std::vector<MATERIAL>& GetMaterials() {
		return m_materials;
	}
};